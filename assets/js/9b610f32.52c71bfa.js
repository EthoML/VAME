"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9580],{6962:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var t=i(4848),r=i(8453);const o={sidebar_label:"community",title:"visualization.community"},s=void 0,l={id:"reference/visualization/community",title:"visualization.community",description:"hierarchy\\_pos",source:"@site/docs/reference/visualization/community.md",sourceDirName:"reference/visualization",slug:"/reference/visualization/community",permalink:"/VAME/docs/reference/visualization/community",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"community",title:"visualization.community"},sidebar:"docsSidebar",previous:{title:"video",permalink:"/VAME/docs/reference/video/"},next:{title:"model",permalink:"/VAME/docs/reference/visualization/model"}},c={},a=[{value:"hierarchy_pos",id:"hierarchy_pos",level:4},{value:"draw_tree",id:"draw_tree",level:4},{value:"visualize_hierarchical_tree",id:"visualize_hierarchical_tree",level:4}];function d(e){const n={a:"a",code:"code",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"hierarchy_pos",children:"hierarchy_pos"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def hierarchy_pos(G: nx.Graph,\n                  root: str | None = None,\n                  width: float = 0.5,\n                  vert_gap: float = 0.2,\n                  vert_loc: float = 0,\n                  xcenter: float = 0.5) -> Dict[str, Tuple[float, float]]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Positions nodes in a tree-like layout.\nRef: From Joel's answer at ",(0,t.jsx)(n.a,{href:"https://stackoverflow.com/a/29597209/2966723",children:"https://stackoverflow.com/a/29597209/2966723"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"G"})," (",(0,t.jsx)(n.code,{children:"nx.Graph"}),"): The input graph. Must be a tree."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"root"})," (",(0,t.jsx)(n.code,{children:"str, optional"}),"): The root node of the tree. If None, the function selects a root node based on graph type.\nDefaults to None."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"width"})," (",(0,t.jsx)(n.code,{children:"float, optional"}),"): The horizontal space assigned to each level. Defaults to 0.5."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"vert_gap"})," (",(0,t.jsx)(n.code,{children:"float, optional"}),"): The vertical gap between levels. Defaults to 0.2."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"vert_loc"})," (",(0,t.jsx)(n.code,{children:"float, optional"}),"): The vertical location of the root node. Defaults to 0."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"xcenter"})," (",(0,t.jsx)(n.code,{children:"float, optional"}),"): The horizontal location of the root node. Defaults to 0.5."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Dict[str, Tuple[float, float]]"}),": A dictionary mapping node names to their positions (x, y)."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"draw_tree",children:"draw_tree"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def draw_tree(T: nx.Graph,\n              fig_width: float = 20.0,\n              usage_dict: Dict[str, float] = dict(),\n              save_to_file: bool = True,\n              show_figure: bool = False,\n              results_dir: str | None = None) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Draw a tree."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"T"})," (",(0,t.jsx)(n.code,{children:"nx.Graph"}),"): The tree to be drawn."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"fig_width"})," (",(0,t.jsx)(n.code,{children:"int, optional"}),"): The width of the figure. Defaults to 20."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"usage_dict"})," (",(0,t.jsx)(n.code,{children:"Dict[str, float], optional"}),"): Dictionary mapping node names to their usage values. Defaults to empty dictionary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"save_to_file"})," (",(0,t.jsx)(n.code,{children:"bool, optional"}),"): Flag indicating whether to save the plot. Defaults to True."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"show_figure"})," (",(0,t.jsx)(n.code,{children:"bool, optional"}),"): Flag indicating whether to show the plot. Defaults to False."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"results_dir"})," (",(0,t.jsx)(n.code,{children:"str, optional"}),"): The directory to save the plot. Defaults to None."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"None"})}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"visualize_hierarchical_tree",children:"visualize_hierarchical_tree"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def visualize_hierarchical_tree(\n        config: dict, segmentation_algorithm: Literal["hmm",\n                                                      "kmeans"]) -> None\n'})}),"\n",(0,t.jsx)(n.p,{children:"Visualizes the hierarchical tree."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"config"})," (",(0,t.jsx)(n.code,{children:"dict"}),"): Configuration dictionary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"segmentation_algorithm"})," (",(0,t.jsx)(n.code,{children:'Literal["hmm", "kmeans"]'}),"): Segmentation algorithm."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"None"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);