"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8247],{2129:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var t=l(4848),o=l(8453);const s={sidebar_label:"evaluate",title:"vame.model.evaluate"},r=void 0,i={id:"reference/vame/model/evaluate",title:"vame.model.evaluate",description:"Variational Animal Motion Embedding 0.1 Toolbox",source:"@site/docs/reference/vame/model/evaluate.md",sourceDirName:"reference/vame/model",slug:"/reference/vame/model/evaluate",permalink:"/docs/reference/vame/model/evaluate",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/vame/model/evaluate.md",tags:[],version:"current",frontMatter:{sidebar_label:"evaluate",title:"vame.model.evaluate"},sidebar:"docsSidebar",previous:{title:"dataloader",permalink:"/docs/reference/vame/model/dataloader"},next:{title:"rnn_model",permalink:"/docs/reference/vame/model/rnn_model"}},d={},a=[{value:"plot_reconstruction",id:"plot_reconstruction",level:4},{value:"plot_loss",id:"plot_loss",level:4},{value:"eval_temporal",id:"eval_temporal",level:4},{value:"evaluate_model",id:"evaluate_model",level:4}];function c(e){const n={a:"a",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Variational Animal Motion Embedding 0.1 Toolbox\n\xa9 K. Luxem & P. Bauer, Department of Cellular Neuroscience\nLeibniz Institute for Neurobiology, Magdeburg, Germany"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/LINCellularNeuroscience/VAME",children:"https://github.com/LINCellularNeuroscience/VAME"}),"\nLicensed under GNU General Public License v3.0"]}),"\n",(0,t.jsx)(n.h4,{id:"plot_reconstruction",children:"plot_reconstruction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def plot_reconstruction(filepath: str,\n                        test_loader: Data.DataLoader,\n                        seq_len_half: int,\n                        model: RNN_VAE,\n                        model_name: str,\n                        FUTURE_DECODER: bool,\n                        FUTURE_STEPS: int,\n                        suffix: Optional[str] = None) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Plot the reconstruction and future prediction of the input sequence."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filepath"})," ",(0,t.jsx)(n.em,{children:"str"})," - Path to save the plot."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test_loader"})," ",(0,t.jsx)(n.em,{children:"Data.DataLoader"})," - DataLoader for the test dataset."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"seq_len_half"})," ",(0,t.jsx)(n.em,{children:"int"})," - Half of the temporal window size."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"model"})," ",(0,t.jsx)(n.em,{children:"RNN_VAE"})," - Trained VAE model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"model_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - Name of the model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FUTURE_DECODER"})," ",(0,t.jsx)(n.em,{children:"bool"})," - Flag indicating whether the model has a future prediction decoder."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FUTURE_STEPS"})," ",(0,t.jsx)(n.em,{children:"int"})," - Number of future steps to predict."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"suffix"})," ",(0,t.jsx)(n.em,{children:"Optional[str], optional"})," - Suffix for the saved plot filename. Defaults to None."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"plot_loss",children:"plot_loss"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def plot_loss(cfg: dict, filepath: str, model_name: str) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Plot the losses of the trained model."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cfg"})," ",(0,t.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"filepath"})," ",(0,t.jsx)(n.em,{children:"str"})," - Path to save the plot."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"model_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - Name of the model."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"eval_temporal",children:"eval_temporal"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def eval_temporal(cfg: dict,\n                  use_gpu: bool,\n                  model_name: str,\n                  fixed: bool,\n                  snapshot: Optional[str] = None,\n                  suffix: Optional[str] = None) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Evaluate the temporal aspects of the trained model."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cfg"})," ",(0,t.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"use_gpu"})," ",(0,t.jsx)(n.em,{children:"bool"})," - Flag indicating whether to use GPU for evaluation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"model_name"})," ",(0,t.jsx)(n.em,{children:"str"})," - Name of the model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fixed"})," ",(0,t.jsx)(n.em,{children:"bool"})," - Flag indicating whether the data is fixed or not."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"snapshot"})," ",(0,t.jsx)(n.em,{children:"Optional[str], optional"})," - Path to the model snapshot. Defaults to None."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"suffix"})," ",(0,t.jsx)(n.em,{children:"Optional[str], optional"})," - Suffix for the saved plot filename. Defaults to None."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"evaluate_model",children:"evaluate_model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def evaluate_model(config: str, use_snapshots: bool = False) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Evaluate the trained model."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," ",(0,t.jsx)(n.em,{children:"str"})," - Path to config file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"use_snapshots"})," ",(0,t.jsx)(n.em,{children:"bool, optional"})," - Whether to plot for all snapshots or only the best model. Defaults to False."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>i});var t=l(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);