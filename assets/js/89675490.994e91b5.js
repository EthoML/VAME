"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19],{6368:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=i(4848),r=i(8453);const o={sidebar_label:"alignment",title:"preprocessing.alignment"},s=void 0,c={id:"reference/preprocessing/alignment",title:"preprocessing.alignment",description:"logger\\_config",source:"@site/docs/reference/preprocessing/alignment.md",sourceDirName:"reference/preprocessing",slug:"/reference/preprocessing/alignment",permalink:"/VAME/docs/reference/preprocessing/alignment",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"alignment",title:"preprocessing.alignment"},sidebar:"docsSidebar",previous:{title:"align_egocentrical_legacy",permalink:"/VAME/docs/reference/preprocessing/align_egocentrical_legacy"},next:{title:"cleaning",permalink:"/VAME/docs/reference/preprocessing/cleaning"}},a={},l=[{value:"logger_config",id:"logger_config",level:4},{value:"logger",id:"logger",level:4},{value:"calculate_geometric_distance",id:"calculate_geometric_distance",level:4},{value:"Calculate the geometric distance between two keypoints.\nParameters",id:"calculate-the-geometric-distance-between-two-keypointsparameters",level:2},{value:"positions : np.ndarray\nArray of positions with shape (time, space, keypoints, individuals) or (time, space, keypoints)\nkeypoint1_idx : int\nIndex of the first keypoint\nkeypoint2_idx : int\nIndex of the second keypoint\nReturns",id:"positions--npndarrayarray-of-positions-with-shape-time-space-keypoints-individuals-or-time-space-keypointskeypoint1_idx--intindex-of-the-first-keypointkeypoint2_idx--intindex-of-the-second-keypointreturns",level:2},{value:"egocentrically_align_and_center",id:"egocentrically_align_and_center",level:4}];function d(e){const n={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h4,{id:"logger_config",children:"logger_config"}),"\n",(0,t.jsx)(n.h4,{id:"logger",children:"logger"}),"\n",(0,t.jsx)(n.h4,{id:"calculate_geometric_distance",children:"calculate_geometric_distance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def calculate_geometric_distance(positions, keypoint1_idx, keypoint2_idx)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"calculate-the-geometric-distance-between-two-keypointsparameters",children:"Calculate the geometric distance between two keypoints.\nParameters"}),"\n",(0,t.jsx)(n.h2,{id:"positions--npndarrayarray-of-positions-with-shape-time-space-keypoints-individuals-or-time-space-keypointskeypoint1_idx--intindex-of-the-first-keypointkeypoint2_idx--intindex-of-the-second-keypointreturns",children:"positions : np.ndarray\nArray of positions with shape (time, space, keypoints, individuals) or (time, space, keypoints)\nkeypoint1_idx : int\nIndex of the first keypoint\nkeypoint2_idx : int\nIndex of the second keypoint\nReturns"}),"\n",(0,t.jsx)(n.p,{children:"np.ndarray\nArray of distances with shape (time, individuals) or (time,)"}),"\n",(0,t.jsx)(n.h4,{id:"egocentrically_align_and_center",children:"egocentrically_align_and_center"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def egocentrically_align_and_center(\n        config: dict,\n        centered_reference_keypoint: str = "snout",\n        orientation_reference_keypoint: str = "tailbase",\n        read_from_variable: str = "position_processed",\n        save_to_variable: str = "position_egocentric_aligned",\n        save_logs: bool = True) -> None\n'})}),"\n",(0,t.jsx)(n.p,{children:"Aligns the time series by first centralizing all positions around the first keypoint\nand then applying rotation to align with the line connecting the two keypoints."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"config"})," (",(0,t.jsx)(n.code,{children:"dict"}),"): Configuration dictionary"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"centered_reference_keypoint"})," (",(0,t.jsx)(n.code,{children:"str"}),"): Name of the keypoint to use as centered reference."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"orientation_reference_keypoint"})," (",(0,t.jsx)(n.code,{children:"str"}),"): Name of the keypoint to use as orientation reference."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"read_from_variable"})," (",(0,t.jsx)(n.code,{children:"str"}),"): Variable to read from the dataset."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"save_to_variable"})," (",(0,t.jsx)(n.code,{children:"str"}),"): Variable to save the aligned data to."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"save_logs"})," (",(0,t.jsx)(n.code,{children:"bool, optional"}),"): Whether to save logs."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"None"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(6540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);