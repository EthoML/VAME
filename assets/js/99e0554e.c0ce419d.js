"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4641],{5733:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>t});var s=r(4848),l=r(8453);const i={sidebar_label:"generative_functions",title:"vame.analysis.generative_functions"},c=void 0,d={id:"reference/vame/analysis/generative_functions",title:"vame.analysis.generative_functions",description:"Variational Animal Motion Embedding 1.0-alpha Toolbox",source:"@site/docs/reference/vame/analysis/generative_functions.md",sourceDirName:"reference/vame/analysis",slug:"/reference/vame/analysis/generative_functions",permalink:"/docs/reference/vame/analysis/generative_functions",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/vame/analysis/generative_functions.md",tags:[],version:"current",frontMatter:{sidebar_label:"generative_functions",title:"vame.analysis.generative_functions"},sidebar:"docsSidebar",previous:{title:"community_analysis",permalink:"/docs/reference/vame/analysis/community_analysis"},next:{title:"gif_creator",permalink:"/docs/reference/vame/analysis/gif_creator"}},o={},t=[{value:"random_generative_samples_motif",id:"random_generative_samples_motif",level:4},{value:"random_generative_samples",id:"random_generative_samples",level:4},{value:"random_reconstruction_samples",id:"random_reconstruction_samples",level:4},{value:"visualize_cluster_center",id:"visualize_cluster_center",level:4},{value:"load_model",id:"load_model",level:4},{value:"generative_model",id:"generative_model",level:4}];function a(e){const n={a:"a",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Variational Animal Motion Embedding 1.0-alpha Toolbox\n\xa9 K. Luxem & P. Bauer, Department of Cellular Neuroscience\nLeibniz Institute for Neurobiology, Magdeburg, Germany"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/LINCellularNeuroscience/VAME",children:"https://github.com/LINCellularNeuroscience/VAME"}),"\nLicensed under GNU General Public License v3.0"]}),"\n",(0,s.jsx)(n.h4,{id:"random_generative_samples_motif",children:"random_generative_samples_motif"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def random_generative_samples_motif(cfg: dict, model: torch.nn.Module,\n                                    latent_vector: np.ndarray,\n                                    labels: np.ndarray,\n                                    n_cluster: int) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generate random samples for motifs."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cfg"})," ",(0,s.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model"})," ",(0,s.jsx)(n.em,{children:"torch.nn.Module"})," - PyTorch model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"latent_vector"})," ",(0,s.jsx)(n.em,{children:"np.ndarray"})," - Latent vectors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"labels"})," ",(0,s.jsx)(n.em,{children:"np.ndarray"})," - Labels."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"n_cluster"})," ",(0,s.jsx)(n.em,{children:"int"})," - Number of clusters."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"None"})," - Plot of generated samples."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"random_generative_samples",children:"random_generative_samples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def random_generative_samples(cfg: dict, model: torch.nn.Module,\n                              latent_vector: np.ndarray) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generate random generative samples."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cfg"})," ",(0,s.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model"})," ",(0,s.jsx)(n.em,{children:"torch.nn.Module"})," - PyTorch model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"latent_vector"})," ",(0,s.jsx)(n.em,{children:"np.ndarray"})," - Latent vectors."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"None"}),"\n",(0,s.jsx)(n.h4,{id:"random_reconstruction_samples",children:"random_reconstruction_samples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def random_reconstruction_samples(cfg: dict, model: torch.nn.Module,\n                                  latent_vector: np.ndarray) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Generate random reconstruction samples."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cfg"})," ",(0,s.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model"})," ",(0,s.jsx)(n.em,{children:"torch.nn.Module"})," - PyTorch model to use."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"latent_vector"})," ",(0,s.jsx)(n.em,{children:"np.ndarray"})," - Latent vectors."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"None"}),"\n",(0,s.jsx)(n.h4,{id:"visualize_cluster_center",children:"visualize_cluster_center"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def visualize_cluster_center(cfg: dict, model: torch.nn.Module,\n                             cluster_center: np.ndarray) -> None\n"})}),"\n",(0,s.jsx)(n.p,{children:"Visualize cluster centers."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cfg"})," ",(0,s.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model"})," ",(0,s.jsx)(n.em,{children:"torch.nn.Module"})," - PyTorch model."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cluster_center"})," ",(0,s.jsx)(n.em,{children:"np.ndarray"})," - Cluster centers."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"None"}),"\n",(0,s.jsx)(n.h4,{id:"load_model",children:"load_model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def load_model(cfg: dict, model_name: str) -> torch.nn.Module\n"})}),"\n",(0,s.jsx)(n.p,{children:"Load PyTorch model."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cfg"})," ",(0,s.jsx)(n.em,{children:"dict"})," - Configuration dictionary."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"model_name"})," ",(0,s.jsx)(n.em,{children:"str"})," - Name of the model."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"torch.nn.Module"})," - Loaded PyTorch model."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"generative_model",children:"generative_model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def generative_model(config: str, mode: str = "sampling") -> None\n'})}),"\n",(0,s.jsx)(n.p,{children:"Generative model."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"config"})," ",(0,s.jsx)(n.em,{children:"str"})," - Path to the configuration file."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mode"})," ",(0,s.jsx)(n.em,{children:"str, optional"}),' - Mode for generating samples. Defaults to "sampling".']}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"None"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var s=r(6540);const l={},i=s.createContext(l);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);