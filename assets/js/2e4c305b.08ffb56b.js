"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6699],{7957:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var n=s(4848),o=s(8453);const r={sidebar_label:"preprocessing",title:"visualization.preprocessing"},l=void 0,t={id:"reference/visualization/preprocessing",title:"visualization.preprocessing",description:"logger\\_config",source:"@site/docs/reference/visualization/preprocessing.md",sourceDirName:"reference/visualization",slug:"/reference/visualization/preprocessing",permalink:"/VAME/docs/reference/visualization/preprocessing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"preprocessing",title:"visualization.preprocessing"},sidebar:"docsSidebar",previous:{title:"motif",permalink:"/VAME/docs/reference/visualization/motif"},next:{title:"report",permalink:"/VAME/docs/reference/visualization/report"}},c={},d=[{value:"logger_config",id:"logger_config",level:4},{value:"logger",id:"logger",level:4},{value:"preprocessing_visualization",id:"preprocessing_visualization",level:4},{value:"visualize_preprocessing_scatter",id:"visualize_preprocessing_scatter",level:4},{value:"visualize_preprocessing_timeseries",id:"visualize_preprocessing_timeseries",level:4},{value:"visualize_preprocessing_cloud",id:"visualize_preprocessing_cloud",level:4}];function a(e){const i={code:"code",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h4,{id:"logger_config",children:"logger_config"}),"\n",(0,n.jsx)(i.h4,{id:"logger",children:"logger"}),"\n",(0,n.jsx)(i.h4,{id:"preprocessing_visualization",children:"preprocessing_visualization"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-python",children:"@save_state(model=PreprocessingVisualizationFunctionSchema)\ndef preprocessing_visualization(config: dict,\n                                save_to_file: bool = False,\n                                show_figure: bool = True) -> None\n"})}),"\n",(0,n.jsx)(i.h4,{id:"visualize_preprocessing_scatter",children:"visualize_preprocessing_scatter"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-python",children:'def visualize_preprocessing_scatter(\n        config: dict,\n        session_index: int = 0,\n        frames: list = [],\n        original_positions_key: str | None = "position",\n        cleaned_positions_key: str | None = "position_cleaned_lowconf",\n        aligned_positions_key: str | None = "position_egocentric_aligned",\n        filtered_positions_key: str | None = "position_processed",\n        scaled_positions_key: str | None = "position_scaled",\n        save_to_file: bool = False,\n        show_figure: bool = True)\n'})}),"\n",(0,n.jsx)(i.p,{children:"Visualize the preprocessing results by plotting the positions of the keypoints in a scatter plot.\nEach position key parameter can be a string (to include that column) or None (to skip that column)."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Parameters"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"config"})," (",(0,n.jsx)(i.code,{children:"dict"}),"): Configuration dictionary."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"session_index"})," (",(0,n.jsx)(i.code,{children:"int, optional"}),"): Index of the session to visualize."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"frames"})," (",(0,n.jsx)(i.code,{children:"list, optional"}),"): List of frames to visualize."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"original_positions_key"})," (",(0,n.jsx)(i.code,{children:"str, optional"}),"): Key for the original positions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"cleaned_positions_key"})," (",(0,n.jsx)(i.code,{children:"str, optional"}),"): Key for the low confidence cleaned positions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"aligned_positions_key"})," (",(0,n.jsx)(i.code,{children:"str, optional"}),"): Key for the egocentric aligned positions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"filtered_positions_key"})," (",(0,n.jsx)(i.code,{children:"str, optional"}),"): Key for the filtered positions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"scaled_positions_key"})," (",(0,n.jsx)(i.code,{children:"str, optional"}),"): Key for the scaled positions."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"save_to_file"})," (",(0,n.jsx)(i.code,{children:"bool, optional"}),"): Whether to save the figure to a file."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"show_figure"})," (",(0,n.jsx)(i.code,{children:"bool, optional"}),"): Whether to show the figure."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Returns"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"None"})}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"visualize_preprocessing_timeseries",children:"visualize_preprocessing_timeseries"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-python",children:'def visualize_preprocessing_timeseries(\n        config: dict,\n        session_index: int = 0,\n        n_samples: int = 1000,\n        sample_offset: int = 0,\n        original_positions_key: str | None = "position",\n        aligned_positions_key: str | None = "position_egocentric_aligned",\n        filtered_positions_key: str | None = "position_processed",\n        scaled_positions_key: str | None = "position_scaled",\n        keypoints: list | None = None,\n        save_to_file: bool = False,\n        show_figure: bool = True)\n'})}),"\n",(0,n.jsx)(i.p,{children:"Visualize the preprocessing results by plotting position data in a timeseries plot."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Parameters"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"config"})," (",(0,n.jsx)(i.code,{children:"dict"}),"): Configuration dictionary."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"session_index"})," (",(0,n.jsx)(i.code,{children:"int, optional"}),"): Index of the session to visualize."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"n_samples"})," (",(0,n.jsx)(i.code,{children:"int, optional"}),"): Number of samples to plot."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"sample_offset"})," (",(0,n.jsx)(i.code,{children:"int, optional"}),"): Starting index for the time series data. Default is 0 (start from beginning)."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"original_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the original positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"aligned_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the aligned positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"filtered_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the filtered positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"scaled_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the scaled positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"keypoints"})," (",(0,n.jsx)(i.code,{children:"list | None, optional"}),"): List of keypoint names to include in the visualization. If None or empty list,\nall keypoints will be included."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"save_to_file"})," (",(0,n.jsx)(i.code,{children:"bool, optional"}),"): Whether to save the figure to a file."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"show_figure"})," (",(0,n.jsx)(i.code,{children:"bool, optional"}),"): Whether to show the figure."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Returns"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"None"})}),"\n"]}),"\n",(0,n.jsx)(i.h4,{id:"visualize_preprocessing_cloud",children:"visualize_preprocessing_cloud"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-python",children:'def visualize_preprocessing_cloud(\n        config: dict,\n        session_index: int = 0,\n        n_samples: int = 1000,\n        aligned_positions_key: str | None = "position_egocentric_aligned",\n        filtered_positions_key: str | None = "position_processed",\n        scaled_positions_key: str | None = "position_scaled",\n        keypoints: list | None = None,\n        alpha: float = 0.3,\n        save_to_file: bool = False,\n        show_figure: bool = True)\n'})}),"\n",(0,n.jsx)(i.p,{children:"Visualize the preprocessing results by plotting a cloud of keypoint positions across multiple frames.\nOnly includes aligned, filtered, and scaled positions as these are in comparable coordinate systems."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Parameters"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"config"})," (",(0,n.jsx)(i.code,{children:"dict"}),"): Configuration dictionary."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"session_index"})," (",(0,n.jsx)(i.code,{children:"int, optional"}),"): Index of the session to visualize."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"n_samples"})," (",(0,n.jsx)(i.code,{children:"int, optional"}),"): Number of frames to include in the visualization. Frames are randomly sampled."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"aligned_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the egocentric aligned positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"filtered_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the filtered positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"scaled_positions_key"})," (",(0,n.jsx)(i.code,{children:"str | None, optional"}),"): Key for the scaled positions. If None, this position type will be skipped."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"keypoints"})," (",(0,n.jsx)(i.code,{children:"list | None, optional"}),"): List of keypoint names to include. If None, all keypoints will be included."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"alpha"})," (",(0,n.jsx)(i.code,{children:"float, optional"}),"): Transparency level for the dots (0.0 to 1.0)."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"save_to_file"})," (",(0,n.jsx)(i.code,{children:"bool, optional"}),"): Whether to save the figure to a file."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"show_figure"})," (",(0,n.jsx)(i.code,{children:"bool, optional"}),"): Whether to show the figure."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Returns"})}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:(0,n.jsx)(i.code,{children:"None"})}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,i,s)=>{s.d(i,{R:()=>l,x:()=>t});var n=s(6540);const o={},r=n.createContext(o);function l(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);