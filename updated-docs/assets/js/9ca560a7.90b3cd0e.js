"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7955],{9064:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>_,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var s=i(4848),r=i(8453);const t={sidebar_label:"pipeline",title:"pipeline"},l=void 0,a={id:"reference/pipeline",title:"pipeline",description:"logger\\_config",source:"@site/docs/reference/pipeline.md",sourceDirName:"reference",slug:"/reference/pipeline",permalink:"/VAME/docs/reference/pipeline",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"pipeline",title:"pipeline"},sidebar:"docsSidebar",previous:{title:"rnn_vae",permalink:"/VAME/docs/reference/model/rnn_vae"},next:{title:"preprocessing",permalink:"/VAME/docs/reference/preprocessing/"}},d={},o=[{value:"logger_config",id:"logger_config",level:4},{value:"logger",id:"logger",level:4},{value:"VAMEPipeline Objects",id:"vamepipeline-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"get_sessions",id:"get_sessions",level:4},{value:"get_raw_datasets",id:"get_raw_datasets",level:4},{value:"preprocessing",id:"preprocessing",level:4},{value:"create_training_set",id:"create_training_set",level:4},{value:"train_model",id:"train_model",level:4},{value:"evaluate_model",id:"evaluate_model",level:4},{value:"run_segmentation",id:"run_segmentation",level:4},{value:"generate_motif_videos",id:"generate_motif_videos",level:4},{value:"run_community_clustering",id:"run_community_clustering",level:4},{value:"generate_community_videos",id:"generate_community_videos",level:4},{value:"visualization",id:"visualization",level:4},{value:"report",id:"report",level:4},{value:"get_states",id:"get_states",level:4},{value:"run_pipeline",id:"run_pipeline",level:4},{value:"unique_in_order",id:"unique_in_order",level:4}];function c(e){const n={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h4,{id:"logger_config",children:"logger_config"}),"\n",(0,s.jsx)(n.h4,{id:"logger",children:"logger"}),"\n",(0,s.jsx)(n.h2,{id:"vamepipeline-objects",children:"VAMEPipeline Objects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class VAMEPipeline()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"__init__",children:"__init__"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def __init__(project_name: str,\n             videos: List[str],\n             poses_estimations: List[str],\n             source_software: Literal["DeepLabCut", "SLEAP", "LightningPose"],\n             working_directory: str = ".",\n             video_type: str = ".mp4",\n             fps: int | None = None,\n             copy_videos: bool = False,\n             paths_to_pose_nwb_series_data: Optional[str] = None,\n             config_kwargs: Optional[dict] = None)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"get_sessions",children:"get_sessions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_sessions() -> List[str]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns a list of session names."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"List[str]"}),": Session names."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"get_raw_datasets",children:"get_raw_datasets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_raw_datasets() -> xr.Dataset\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns a xarray dataset which combines all the raw data from the project."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"dss"})," (",(0,s.jsx)(n.code,{children:"xarray.Dataset"}),"): Combined raw dataset."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"preprocessing",children:"preprocessing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def preprocessing(centered_reference_keypoint: str = "snout",\n                  orientation_reference_keypoint: str = "tailbase")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"create_training_set",children:"create_training_set"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def create_training_set()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"train_model",children:"train_model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def train_model()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"evaluate_model",children:"evaluate_model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def evaluate_model()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"run_segmentation",children:"run_segmentation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def run_segmentation()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"generate_motif_videos",children:"generate_motif_videos"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def generate_motif_videos()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"run_community_clustering",children:"run_community_clustering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def run_community_clustering()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"generate_community_videos",children:"generate_community_videos"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def generate_community_videos()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"visualization",children:"visualization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def visualization()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"report",children:"report"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def report()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"get_states",children:"get_states"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_states(summary: bool = True) -> dict\n"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the pipeline states."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dict"}),": Pipeline states."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"run_pipeline",children:"run_pipeline"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def run_pipeline(from_step: int = 0, preprocessing_kwargs: dict = {})\n"})}),"\n",(0,s.jsx)(n.h4,{id:"unique_in_order",children:"unique_in_order"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def unique_in_order(sequence)\n"})})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);