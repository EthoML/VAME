"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2185],{779:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(4848),i=r(8453);const a={sidebar_label:"create_training",title:"vame.model.create_training"},s=void 0,l={id:"reference/vame/model/create_training",title:"vame.model.create_training",description:"Variational Animal Motion Embedding 1.0-alpha Toolbox",source:"@site/docs/reference/vame/model/create_training.md",sourceDirName:"reference/vame/model",slug:"/reference/vame/model/create_training",permalink:"/VAME/docs/reference/vame/model/create_training",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"create_training",title:"vame.model.create_training"},sidebar:"docsSidebar",previous:{title:"logger",permalink:"/VAME/docs/reference/vame/logging/logger"},next:{title:"dataloader",permalink:"/VAME/docs/reference/vame/model/dataloader"}},d={},c=[{value:"plot_check_parameter",id:"plot_check_parameter",level:4},{value:"traindata_aligned",id:"traindata_aligned",level:4},{value:"traindata_fixed",id:"traindata_fixed",level:4},{value:"create_trainset",id:"create_trainset",level:4}];function o(e){const n={a:"a",code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Variational Animal Motion Embedding 1.0-alpha Toolbox\n\xa9 K. Luxem & P. Bauer, Department of Cellular Neuroscience\nLeibniz Institute for Neurobiology, Magdeburg, Germany"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/LINCellularNeuroscience/VAME",children:"https://github.com/LINCellularNeuroscience/VAME"}),"\nLicensed under GNU General Public License v3.0"]}),"\n",(0,t.jsx)(n.h4,{id:"plot_check_parameter",children:"plot_check_parameter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def plot_check_parameter(cfg: dict, iqr_val: float, num_frames: int,\n                         X_true: List[np.ndarray], X_med: np.ndarray) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Plot the check parameter - z-scored data and the filtered data."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cfg"})," ",(0,t.jsx)(n.em,{children:"dict"})," - Configuration parameters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"iqr_val"})," ",(0,t.jsx)(n.em,{children:"float"})," - IQR value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"num_frames"})," ",(0,t.jsx)(n.em,{children:"int"})," - Number of frames."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"X_true"})," ",(0,t.jsx)(n.em,{children:"List[np.ndarray]"})," - List of true data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"X_med"})," ",(0,t.jsx)(n.em,{children:"np.ndarray"})," - Filtered data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"anchor_1"})," ",(0,t.jsx)(n.em,{children:"int"})," - Index of the first anchor point (deprecated)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"anchor_2"})," ",(0,t.jsx)(n.em,{children:"int"})," - Index of the second anchor point (deprecated)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"None - Plot the z-scored data and the filtered data."}),"\n",(0,t.jsx)(n.h4,{id:"traindata_aligned",children:"traindata_aligned"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def traindata_aligned(cfg: dict, files: List[str], testfraction: float,\n                      savgol_filter: bool, check_parameter: bool) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create training dataset for aligned data."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cfg"})," ",(0,t.jsx)(n.em,{children:"dict"})," - Configuration parameters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"files"})," ",(0,t.jsx)(n.em,{children:"List[str]"})," - List of files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"testfraction"})," ",(0,t.jsx)(n.em,{children:"float"})," - Fraction of data to use as test data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"num_features"})," ",(0,t.jsx)(n.em,{children:"int"})," - Number of features (deprecated)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"savgol_filter"})," ",(0,t.jsx)(n.em,{children:"bool"})," - Flag indicating whether to apply Savitzky-Golay filter."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"check_parameter"})," ",(0,t.jsx)(n.em,{children:"bool"})," - If True, the function will plot the z-scored data and the filtered data."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"None - Save numpy arrays with the test/train info to the project folder."}),"\n",(0,t.jsx)(n.h4,{id:"traindata_fixed",children:"traindata_fixed"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def traindata_fixed(cfg: dict, files: List[str], testfraction: float,\n                    num_features: int, savgol_filter: bool,\n                    check_parameter: bool,\n                    pose_ref_index: Optional[List[int]]) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create training dataset for fixed data."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"cfg"})," ",(0,t.jsx)(n.em,{children:"dict"})," - Configuration parameters."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"files"})," ",(0,t.jsx)(n.em,{children:"List[str]"})," - List of files."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"testfraction"})," ",(0,t.jsx)(n.em,{children:"float"})," - Fraction of data to use as test data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"num_features"})," ",(0,t.jsx)(n.em,{children:"int"})," - Number of features."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"savgol_filter"})," ",(0,t.jsx)(n.em,{children:"bool"})," - Flag indicating whether to apply Savitzky-Golay filter."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"check_parameter"})," ",(0,t.jsx)(n.em,{children:"bool"})," - If True, the function will plot the z-scored data and the filtered data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pose_ref_index"})," ",(0,t.jsx)(n.em,{children:"Optional[List[int]]"})," - List of reference coordinate indices for alignment."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(n.p,{children:"None - Save numpy arrays with the test/train info to the project folder."}),"\n",(0,t.jsx)(n.h4,{id:"create_trainset",children:"create_trainset"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@save_state(model=CreateTrainsetFunctionSchema)\ndef create_trainset(config: str,\n                    pose_ref_index: Optional[List] = None,\n                    check_parameter: bool = False,\n                    save_logs: bool = False) -> None\n"})}),"\n",(0,t.jsx)(n.p,{children:"Creates a training dataset for the VAME model."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," ",(0,t.jsx)(n.em,{children:"str"})," - Path to the config file."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pose_ref_index"})," ",(0,t.jsx)(n.em,{children:"Optional[List], optional"})," - List of reference coordinate indices for alignment. Defaults to None."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"check_parameter"})," ",(0,t.jsx)(n.em,{children:"bool, optional"})," - If True, the function will plot the z-scored data and the filtered data. Defaults to False."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);